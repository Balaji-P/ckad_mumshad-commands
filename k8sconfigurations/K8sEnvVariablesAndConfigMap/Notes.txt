There are several ways to provide ENV variables in yml

KEY VALUE PAIR WAY
    env:
    - name: <name>
      value: <val>
    - name: <name2>
      value: <val2>
    - name: <name3>
      value: <val3>

FROM CONFIGMAP

env:
  - name: APP_COLOR
    valueFrom:
      configMapKeyRef:
        name: config-name
        key: key-name  
             



CONFIG Map is a Key Value PAIR for maintaining Large list of ENV variables

apiVersion: v1
kind: Pod
metadata:
  name: simple-webapp-color
spec:
  containers:
   - name: simple_container
     image: simpe_webapp_image
     ports:
        - containerPort: 8080
     envFrom:
     - configMapRef:
         name: app-configMap 

Imperative Way to create configMap

kubectl create configmap <config-name>  --from-literal=<key>=<value> --from-literal=<key2>=<value2> 
OR
kubectl create configmap <config-name>  --from-file=<path_to_file_containing_key_value_pairs>

--------------

Declerative way to create configMap 

kubectl create -f configMap.yaml

config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: app-config
data:
    APP_COLOR: blue
    APP_MODE: provide

------------HOW TO INJECT ConfigMap in Pods -----------------------
Injecting Complete ConfigMap

apiVersion: v1
kind:Pod
metadata:
 name: pod-name
spec:
 containers:
 - name : name 
   image : image
   ports:
    - containerPort: 8080
   envFrom:
    - configMapRef:
        name: app_config


-------------------------------------------------------------------
Injecting ConfigMap key value pairs needed

apiVersion: v1
kind:Pod
metadata:
 name: pod-name
spec:
 containers:
 - name : name 
   image : image
   ports:
    - containerPort: 8080
   env:
    - name: APP_COLOR 
      valueFrom:
        configMapKeyRef:
            name: app-config
            key: APP_COLOR

---------------------------------------------
Config Maps can be injected as VOLUMES as well

volumes:
- name: app-config-volume
  configMap:
    name: 