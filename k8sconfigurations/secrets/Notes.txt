
kubectl explain pods --recursive | less 
--> This Gives you yaml desription of all possible params that a yaml can take and their yaml syntax  

Example :- type ==>   kubectl explain pods --recursive | less  and then search envFrom and see its yaml sytax 
it tells envFrom is an ArrayOfObject and can take params like ConfigMapRef and secretRef

How to strip n lines below a grep match 

 kubectl explain pods --recursive | grep -A<n> envFrom  // This will strip 8 Lines Starting from envFrom match
 kubectl explain pods --recursive | grep -A8  envFrom
         envFrom        <[]Object>
            configMapRef        <Object>
               name     <string>
               optional <boolean>
            prefix      <string>
            secretRef   <Object>
               name     <string>
               optional <boolean> 


kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-qlzr2   kubernetes.io/service-account-token   3      14m
-----> DATA field tells how many items are their in this secret ----> VVIIMP

kubectl describe secrets default-token-qlzr
--> Data section tells hidden field items 


Creating Secret 

Imperative Way

kubectl create Secret generic <secret-name> --from-literal=<key>=<value> --from-literal=<key1>=<value1>

Or

kubectl create Secret generic <secret-name> --from-file=app_secret.properties 

Declerative Way

kubectl create -f file.yaml

secret-data.yaml
apiVersion: v1
kind: secret
metadata:
  name: app-secret 
 data:
    DB_Host: mysql
    DB_User: root
    DB_Password: password
----------

Secret Values must be provided in Hashed/encoded  Format not in plain text in yaml file above

command to convert text to encode 

echo -n 'mysql' | base64
bX1zcWw=

echo -n 'root' | base64
cm9vDA== 

HOW to decode encoded value

echo -n 'bX1zcWw=' | base64 --decode
mysql

------------------------------------

Configuring secrets in a Pod , the below makes secrtes available as Env variables in Pod 

apiVersion: v1
kind: Pod
metadata:
    name: sample-pod
    labels:
        name: sample-pod
spec:
   containers:
   - name: name
     image: image
     ports:
        -containerPort: 8080
     envFrom:
        - secretRef:
            name: app-secret-name 

Other ways of injection similar to ConfigMap

env:
- name: env_name
  valueFrom:
    secretKeyRef:
        name: <secret-name>
        key: <key_name_inside_secret>

volumes:
- name: app-secret-volume
  secret:
    secretName: app-secret


NOTE When you mount the secret as volume , each key while become the file  and its contents value in the secret volume 

assuming app-secret has 3 values for DB 
then

ls /opt/app-secret-volumes
DB_Host DB_Password DB_User

cat /opt/app-secret-volumes/DB_Password
password

cat /opt/app-secret-volumes/DB_Host
root 

Encrypting Secret Data at Rest  --->  https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/  

